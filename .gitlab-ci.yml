stages:
  - unitTests
  - autoMerge
  - test
  - createWebTest
  - afterMerge
  - buildStaging
  - updateStaging
  - buildProduction
  - deploy

run_unit_tests:
  stage: unitTests
  script:
    - rsync -a /home/gitlab-runner/.envs .
    - docker-compose -f local.yml build
    - CURRENT_UID=$(id -u):$(id -g) docker stack deploy -c cicd/local.yml ${CI_COMMIT_REF_NAME}-tests
    - while [[ $(docker ps -a | grep ${CI_COMMIT_REF_NAME}-tests_django | grep Exited | wc -l) == 0 ]]; do sleep 1; done
    - docker logs $(docker ps -a | grep -oP "$CI_COMMIT_REF_NAME"-tests_django.+\s?)
    - if [[ $(docker logs $(docker ps -a | grep -oP "$CI_COMMIT_REF_NAME"-tests_django.+\s?) --tail 2 2>&1 | grep FAILED | wc -l) == 1 ]]; then docker stack rm ${CI_COMMIT_REF_NAME}-tests && exit 1; fi
    - docker stack rm ${CI_COMMIT_REF_NAME}-tests
  environment:
    name: review/$CI_COMMIT_REF_NAME
  only:
    - branches
  except:
    refs:
      - master
      - production
  tags:
    - dev

create_merge_request:
  stage: autoMerge
  only:
    - branches
  except:
    refs:
      - master
      - production
  script:
    - HOST=${CI_PROJECT_URL} CI_PROJECT_ID=${CI_PROJECT_ID} CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME} GITLAB_USER_ID=${GITLAB_USER_ID} PRIVATE_TOKEN=${PRIVATE_TOKEN} ./cicd/autoMergeRequest.sh
  tags:
    - dev

docker_stop_web_test:
  stage: afterMerge
  script:
    - python cicd/stopDockerStack.py "${CI_COMMIT_MESSAGE}"
  only:
    refs:
      - master
    variables:
      - $CI_COMMIT_MESSAGE =~ /.*Merge branch.*into.*/
  tags:
    - dev

docker_web_test:
  stage: createWebTest
  script:
    - rsync -a /home/gitlab-runner/.envs .
    - docker stack rm $CI_COMMIT_REF_NAME || true
    - while [[ $(docker ps | grep $CI_COMMIT_REF_NAME | wc -l) > 0 ]]; do sleep 1; done
    - cd userinterface && npm i && npm run collect-ci
    - cd ../
    - cp gfbio_submissions/templates/account/webtest_login.html gfbio_submissions/templates/account/login.html
    - sed -i s/BRANCH/$CI_COMMIT_REF_NAME/g cicd/production.yml
    - sed -i s/DJANGO_ALLOWED_HOSTS=.*/DJANGO_ALLOWED_HOSTS=\.dev\.submissions\.gfbio\.org/g .envs/.production/.django
    - sed -i 's/DJANGO_ADMIN_URL=.*\//DJANGO_ADMIN_URL='"$ADMIN_URL"'/g' .envs/.production/.django
    - sed -i s/EMDATE/$(date +%Y-%m-%d -d "+ 365 days")/g cicd/test_data.json
    - docker-compose -f production.yml build
    - ADMIN_NICKNAME=${ADMIN_NICKNAME} ADMIN_EMAIL=${ADMIN_EMAIL} ADMIN_PASSWORD=${ADMIN_PASSWORD} docker stack deploy -c cicd/production.yml $CI_COMMIT_REF_NAME
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_COMMIT_REF_NAME.dev.submissions.gfbio.org/accounts/login
  only:
    refs:
      - branches
    variables:
      - $CI_COMMIT_MESSAGE =~ /.*web-test.*/
  except:
    refs:
      - master
      - production
  tags:
    - dev

build_staging:
  stage: buildStaging
  script:
    - rsync -a /home/gitlab-runner/.envs .
    - ./cicd/traefikHostReplace.sh
    - cd userinterface && npm i && npm run collect-ci
    - cd ../
    - docker-compose -f production.yml build
  environment:
    name: staging
  only:
    refs:
      - master
  tags:
    - staging

update_staging_env:
  stage: updateStaging
  script:
    - rsync -a /home/gitlab-runner/.envs .
    - .cicd/traefikHostReplace.sh
    - docker-compose -f production.yml up -d postgres
    - docker-compose -f production.yml run --rm postgres backup
    - docker-compose -f production.yml run --rm django python manage.py migrate
    - docker-compose -f production.yml down
    - docker-compose -f production.yml up -d
  environment:
    name: staging
    url: https://c103-171.cloud.gwdg.de/
  only:
    refs:
      - master
  tags:
    - staging

production_build:
  stage: buildProduction
  script:
    - rsync -a /home/gitlab-runner/.envs .
    - cd userinterface && npm i && npm run collect-ci
    - cd ../
    - docker-compose -f production.yml build
  only:
    refs:
      - tags
  except:
    - branches
    - /^\d+-/i
  tags:
    - production

deploy_to_production:
  stage: deploy
  script:
    - rsync -a /home/gitlab-runner/.envs .
    - docker-compose -f production.yml up -d postgres
    - docker-compose -f production.yml run --rm postgres backup
    - docker-compose -f production.yml run --rm django python manage.py migrate
    - docker-compose -f production.yml down
    - docker-compose -f production.yml up -d
  environment:
    name: production
    url: https://submissions.gfbio.org
  only:
    refs:
      - tags
  except:
    - branches
    - /^\d+-/i
  tags:
    - production

