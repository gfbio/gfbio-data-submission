# -*- coding: utf-8 -*-
import csv
import json
import os
import subprocess
from io import StringIO

from django.conf import settings

from gfbio_submissions.brokerage.models import AuditableTextData
from gfbio_submissions.generic.models import RequestLog


def create_ena_manifest_text_data(submission):
    # TODO: check or return
    study_bo = submission.brokerobject_set.filter(type='study').first()
    # TODO: check or return
    study_pid = study_bo.persistentidentifier_set.filter(
        archive='ENA').filter(pid_type='PRJ').first()
    # TODO: check or return
    upload = submission.submissionupload_set.filter(
        file__endswith='.tsv.gz').first()
    tab_file_path = os.path.join(settings.MEDIA_ROOT, upload.file.name)

    output = StringIO()
    writer = csv.writer(output, delimiter=str('\t'))

    writer.writerow(('STUDY', study_pid.pid))
    writer.writerow(('NAME', '{}:{}'.format(study_bo.pk,
                                            submission.broker_submission_id)))
    writer.writerow(('TAB', tab_file_path))
    writer.writerow(('AUTHORS', 'Weber M., Kostadinov I.;'))
    writer.writerow(('ADDRESS',
                     'University of Bremen, Leobener Str. 5, 28359 Bremen, Germany'))
    text_data = submission.auditabletextdata_set.create(
        name='MANIFEST',
        text_data=output.getvalue(),
        comment='Generated by create_ena_manifest_text_data'
    )
    output.close()
    return text_data


def store_manifest_to_filesystem(submission):
    submission_folder = os.path.join(settings.MEDIA_ROOT,
                                     str(submission.broker_submission_id))
    manifest_text_data = AuditableTextData.objects.get_ena_manifest_file(
        submission)
    if manifest_text_data:
        with open('{0}{1}{2}'.format(
                submission_folder,
                os.sep,
                manifest_text_data.name), 'w') as output:
            output.write(manifest_text_data.text_data)


def submit_targeted_sequences(
        username,
        password,
        submission,
        center_name='GFBIO',
        test=True,
        validate=True):
    submission_folder = os.path.join(settings.MEDIA_ROOT,
                                     str(submission.broker_submission_id))
    manifest_path = os.path.join(submission_folder, 'MANIFEST')

    command = [
        'java', '-jar', 'ena_webin_cli/webin-cli-3.0.0.jar',
        '-context', 'sequence',
        '-username', username,
        '-password', password,
        '-centername', center_name,
        '-manifest', manifest_path,
        '-inputDir', submission_folder,
        '-outputDir', submission_folder
    ]
    if test:
        command.append('-test')
    if validate:
        command.append('-validate')
    else:
        command.append('-submit')

    request_log = RequestLog.objects.create(
        type=RequestLog.OUTGOING,
        method=RequestLog.NONE,
        url=manifest_path,
        submission_id=submission.broker_submission_id,
        user=submission.user,
        data='{}'.format(command),
        files=manifest_path,
        json={},
    )

    details = {}
    success = False
    try:
        res = subprocess.run(command, capture_output=True, check=False)

        # details['output'] = '{}'.format(res)
        details['output'] = {
            'args': '{}'.format(res.args),
            'returncode': '{}'.format(res.returncode),
            'stdout': '{}'.format(res.stdout),
            'stderr': '{}'.format(res.stderr),
        }
        details['folder_content'] = os.listdir(submission_folder)
        with open(os.path.join(submission_folder,
                               'webin-cli.report'), 'r') as report:
            details['webin_report'] = report.read()
        success = True
        # TODO: edit Manifest ? auditing trail ? when available use ATextData object ?

    except subprocess.CalledProcessError as e:
        details['called_process_error'] = '{}'.format(e)
        success = False
    except FileNotFoundError as e:
        details['file_not_found_error'] = '{}'.format(e)
        success = False
    request_log.request_details = details
    request_log.save()

    return success
